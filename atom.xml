<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>择高处立，向宽处行</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gyymz1993.github.io/"/>
  <updated>2017-03-27T03:29:43.267Z</updated>
  <id>https://gyymz1993.github.io/</id>
  
  <author>
    <name>Mr●Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android基本面试题</title>
    <link href="https://gyymz1993.github.io/2017/03/03/2017-3-3-Android%E9%9D%A2%E8%AF%95/"/>
    <id>https://gyymz1993.github.io/2017/03/03/2017-3-3-Android面试/</id>
    <published>2017-03-03T07:29:30.000Z</published>
    <updated>2017-03-27T03:29:43.267Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎访问我的博客，我会为你们奉献更多的干货，感谢大家的支持</p>
<h2 id="Please-read-happily"><a href="#Please-read-happily" class="headerlink" title="Please read happily"></a>Please read happily</h2><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">


<h2 id="经典中的经典四大组件"><a href="#经典中的经典四大组件" class="headerlink" title="经典中的经典四大组件"></a>经典中的经典四大组件</h2><p>1 Activity<br>2 Service<br>3 BroadCastRevceiver<br>4 ContentProviders</p>
<h3 id="Activity必须要了解的知识点"><a href="#Activity必须要了解的知识点" class="headerlink" title="Activity必须要了解的知识点"></a>Activity必须要了解的知识点</h3><p>Activity的生命周期？<br><img src="http://upload-images.jianshu.io/upload_images/433829-b32d2883fc674dd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h6 id="当我们启动一个Activity执行流程"><a href="#当我们启动一个Activity执行流程" class="headerlink" title="当我们启动一个Activity执行流程"></a>当我们启动一个Activity执行流程</h6><p>onCreate-&gt;onStart-&gt;onResume</p>
<h6 id="Activity退居后台-当我们点击返回后执行流程"><a href="#Activity退居后台-当我们点击返回后执行流程" class="headerlink" title="Activity退居后台:当我们点击返回后执行流程"></a>Activity退居后台:当我们点击返回后执行流程</h6><p>onPause-&gt;onStop-&gt;onDestory</p>
<h6 id="Activity退居后台-当我们点击Home后执行流程或者跳转新的Activity"><a href="#Activity退居后台-当我们点击Home后执行流程或者跳转新的Activity" class="headerlink" title="Activity退居后台:当我们点击Home后执行流程或者跳转新的Activity"></a>Activity退居后台:当我们点击Home后执行流程或者跳转新的Activity</h6><p>onPaused-&gt;onStop</p>
<h6 id="Activity返回前台-当我们点击Home后再次进入Activity"><a href="#Activity返回前台-当我们点击Home后再次进入Activity" class="headerlink" title="Activity返回前台:当我们点击Home后再次进入Activity"></a>Activity返回前台:当我们点击Home后再次进入Activity</h6><p>onRestart-&gt;onStart-&gt;onResume</p>
<h6 id="锁屏-onPause-gt-Stop"><a href="#锁屏-onPause-gt-Stop" class="headerlink" title="锁屏:onPause-&gt;Stop"></a>锁屏:onPause-&gt;Stop</h6><h6 id="解锁-onReStart-gt-onStart-gt-onResume"><a href="#解锁-onReStart-gt-onStart-gt-onResume" class="headerlink" title="解锁 :onReStart-&gt;onStart-&gt;onResume"></a>解锁 :onReStart-&gt;onStart-&gt;onResume</h6><h6 id="理解清楚整个生命周期中只有三个状态是稳定的，其他都是属于过渡状态很重要。"><a href="#理解清楚整个生命周期中只有三个状态是稳定的，其他都是属于过渡状态很重要。" class="headerlink" title="理解清楚整个生命周期中只有三个状态是稳定的，其他都是属于过渡状态很重要。"></a>理解清楚整个生命周期中只有三个状态是稳定的，其他都是属于过渡状态很重要。</h6><p>Resume:此时Activity处于运行状态位于栈顶，能和用户交互的状态；<br>Paused:此时Activity处理半遮挡状态，这个状态不能接受用户输入；<br>Stopped:完全被覆盖，也就是此Activity已经不可见了。</p>
<h5 id="Activity中缓存方法以及数据恢复机制"><a href="#Activity中缓存方法以及数据恢复机制" class="headerlink" title="Activity中缓存方法以及数据恢复机制"></a>Activity中缓存方法以及数据恢复机制</h5><p>在Activity中提供了两个很重要的方法</p>
<ul>
<li>onSaveInstanceState()</li>
<li>onRestoreInstanceState()</li>
</ul>
<p>######当Activity在未经你的许可，也就不是你人为销毁此Activity的情况下都会执行onSvaInstanceState方法来保存你的数据，举例说明几种情况会执行onSaveInstanceState<br>1 当用户按下Home键；<br>并且onSaveInstanceState中能保证在onStop之前执行，可能会在onPause之前也可能在后面。<br>2 长按Home键选择其他程序；<br>3 按下电源键关闭屏幕显示时；<br>4 从Activity中启动一个新的Activity<br>5 当屏幕方向切换时，如果没有指定ConfigChange属性<br>onSaveInstanceState方法的一般都是 记录Activity和UI的瞬间状态，不应该用这个方法不做持久化操作。</p>
<h5 id="onRestoreInstanceState方法的恢复数据状态"><a href="#onRestoreInstanceState方法的恢复数据状态" class="headerlink" title="onRestoreInstanceState方法的恢复数据状态"></a>onRestoreInstanceState方法的恢复数据状态</h5><p>1 需要注意的是onSaveInstanceState<br>onRestoreInstanceState不一定是成双的；<br>2 onRestoreInstanceState执行条件是在此Activity的确被销毁了；<br>3 onSaveInstanceState中的Bundle也会传递到onCreate中,所以也可以选择在onCreate中恢复数据；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">protected void onSaveInstanceState(Bundle outState) &#123;</div><div class="line">       super.onSaveInstanceState(outState);</div><div class="line">       outState.putString(&quot;anAnt&quot;,&quot;Android&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="Activity的四中启动模式"><a href="#Activity的四中启动模式" class="headerlink" title="Activity的四中启动模式"></a>Activity的四中启动模式</h5><p>使用android:launchMode=”standard|singleInstance|singleTask|singleTop”来控制Acivity任务栈。</p>
<ul>
<li>standard为默认启动模式，如果不指定其他模式则都会使用此模式启动，每次都会创建一个新的Activcity，并且将其置于任务栈的栈顶，而不管这个Activity是否创建，并且执行三回调（onCreate-&gt;onStart-&gt;onResume）</li>
<li>singleTop为栈顶复用模式，系统判断你要启动的Activity是否位于栈顶，如果位于栈顶则直接使用，所以他的启动三回调不会执行，但是Activity的onNewIntent的方法会执行，如果Activity已存在不位于栈顶则和Standard模式一样。</li>
<li>singleTask为栈内复用模式，singleTop判断顶栈元素是否是启动的Activity，而singleTask则判断栈内是否存在Activity，如果存在则至于栈顶，并且执行onNewIntent方法，以及会清理在当前Activity上面的所有Activity;</li>
<li>singleInstance:为加强版的singleTask模式，这种模式类似使用浏览器，在多个程序中访问浏览器时，如果当前浏览器没有打开则先打开浏览器，否则直接在浏览器中访问，Activcity只能单独位于任务栈内，由于栈内复用的特性，所以后续的请求都不会创建新的Activity，除非这个独特的任务栈被系统销毁。</li>
</ul>
<h3 id="Service必须了解的知识点"><a href="#Service必须了解的知识点" class="headerlink" title="Service必须了解的知识点"></a>Service必须了解的知识点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void startService()&#123;</div><div class="line">       //启动一个Service</div><div class="line">       Intent intent=new Intent(this,Service.class);</div><div class="line">       startService(intent);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public void startService()&#123;</div><div class="line">      Intent intent=new Intent(this, Service.class);</div><div class="line">      bindService(intent, new ServiceConnection() &#123;</div><div class="line">          @Override</div><div class="line">          public void onServiceConnected(ComponentName name, IBinder service) &#123;&#125;</div><div class="line">          @Override</div><div class="line">          public void onServiceDisconnected(ComponentName name) &#123;&#125;</div><div class="line">      &#125;,BIND_AUTO_CREATE);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>上面是Service的两种启动方式</p>
<h6 id="Activity相比，service的生命周期已经简单的不能再简单了"><a href="#Activity相比，service的生命周期已经简单的不能再简单了" class="headerlink" title="Activity相比，service的生命周期已经简单的不能再简单了"></a>Activity相比，service的生命周期已经简单的不能再简单了</h6><p>只有onCreate()-&gt;onStart()-&gt;onDestroy()三个方法。<br>  Activity中和service有关的方法：        </p>
<ul>
<li>startService(Intent intent)：启动一个service        </li>
<li>stopService(Intent intent) :停止一个service    </li>
</ul>
<p>如果我们想使用service中的一些数据或者访问其中的一些方法，那么我们就要通过下面的方法：</p>
<ul>
<li>public boolean bindService(Intent intent, ServiceConnection conn, int flags) ；        </li>
<li>public void unbindService(ServiceConnection conn); </li>
</ul>
<p>上面startService()和bindService()两种模式是完全独立的。你可以绑定一个已经通过startService()方法启动的服务<br>只要调用一次stopService()方法便可以停止服务，无论之前它被调用了多少次的启动服务方法</p>
<p>######注意：Service的onCreate的方法只会被调用一次，就是你无论多少次的startService又 bindService，Service只被创建一次。如果先是bind了，那么start的时候就直接运行Service的onStart方法，如果先是start，那么bind的时候就直接运行onBind方法。如果你先bind上了，就stop不掉了，只能先UnbindService, 再StopService,所以是先start还是先bind行为是有区别的。</p>
<h4 id="IntentService的使用"><a href="#IntentService的使用" class="headerlink" title="IntentService的使用"></a>IntentService的使用</h4><p>因为Service默认都是在主线程中使用，所以如果在服务里处理一些耗时操作很容易出现ARN的情况<br>这个时候就可以用到IntentService，而且当IntentService执行完毕后会自动停止。</p>
<p>###Service怎么避免被杀毒软件杀掉和系统回收<br>1 Service设置为START_STICKY,Kill后会被重启，重传Intent，保证和重启前一样。<br>2 提升Service的优先级，在AndroidManifaster.xml中android:priority=”1000”。<br>3 当Service销毁时发送个广播来重启Service<br>4 双进程守护<br>5 开启一个一像素的Activity在前台。<br>6 android的系统进程分为五个等级, Foreground Process(前台进程), Visible Process(可见进程), Service Process(服务进程), Background Process(后台进程), Empty Process(空进程), Service的进程处于第三个位置. 系统的回收会从低到高依次回收, 所以我们必须提高Service的等级；<br>仔细看Service的API会发现这么个方法 <a href="https://zhidao.baidu.com/question/986920772385515139" target="_blank" rel="external">参考链接</a></p>
<ul>
<li>public final void startForeground (int id, Notification notification)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line">    private void startForegroundCompat() &#123;</div><div class="line">        try &#123;</div><div class="line">            if (Build.VERSION.SDK_INT &lt; 18) &#123;</div><div class="line">                Log.e(TAG, &quot;startForgroundCompat&quot;);</div><div class="line">                startForeground(1120, new Notification());</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果这样做之后, 你会发现一键清理对你的Service是完全不起作用的。</p>
<h3 id="BroadcastReceive广播接收器"><a href="#BroadcastReceive广播接收器" class="headerlink" title="BroadcastReceive广播接收器"></a>BroadcastReceive广播接收器</h3><p>标准广播：是一个完全异步的广播，在广播发出后，所有的广播接收器机会都会在同一时刻收到这条广播消息，因此他们之间没有任何先后顺序而言。<br>有序广播：是一个同步执行广播，在 广播发出后，同一时刻只会有一个接收器接收到此广播，并且当广播接收器接收执行完毕后，广播才会继续传播，所以 他们是有先后顺序的，优先级越高则先收到广播，并且这样的广播接受者可以截断正在传播的 广播，这样后面的广播接受者就无法接收到广播了。<br>发送标准广播和有序广播只要改动一行代码 sendBroadcast()改成sendOrderBroadCast()</p>
<p>######广播的使用</p>
<ul>
<li>动态注册广播<br>  registerReceiver(mBroadcastReceive,null);<br>  unregisterReceiver(mBroadcastReceive);</li>
<li>静态注册广播</li>
</ul>
<p>1 Service的两种启动方法，有什么区别 1.在Context中通过public boolean bindService(Intent service,ServiceConnection conn,int flags) 方法来进行Service与Context的关联并启动，并且Service的生命周期依附于Context(不求同时同分同秒生！但求同时同分同秒屎！！)。<br>2  通过public ComponentName startService(Intent service)方法去启动一个Service，此时Service的生命周期与启动它的Context无关。<br>在AndroidManifaster中注册广播</p>
<h6 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h6><p>前面得广播数据系统全局广播，如果你发的 广播只想本程序收到那么久可以使用本地广播<br>开启本地广播只需要得到本地广播管理器来发送和注册广播就可以LocalBoradCastManager</p>
<ul>
<li>mLocalBroadcastManager.registerReceiver(mBroadcastReceive,null);</li>
<li>mLocalBroadcastManager.unregisterReceiver(mBroadcastReceive);</li>
</ul>
<h3 id="contentProvider内容提供者，跨程序数据共享-。"><a href="#contentProvider内容提供者，跨程序数据共享-。" class="headerlink" title="contentProvider内容提供者，跨程序数据共享 。"></a>contentProvider内容提供者，跨程序数据共享 。</h3><p>一个程序通过ContentProvider抽象接口将自己的数据提供了外部访问的接口，而且是以类似数据库中表的方式暴露出去。ContentProviders存储与检索数据，任何其他应用程序都可以对这部分数据进行访问。<br>1 创建自己的ContentProvider继承ContentProvider<br>2  在AndroidManifaster中注册自己 的ContenetProviders<br>3  通过设置 URL让CotentPorvider内部做类似数据库的响应操作<br>最后我们就可以更具此URL来实现数据的访问操作</p>
<h3 id="解析XML的几种方式的原理和特点：DOM-SAX-PULL"><a href="#解析XML的几种方式的原理和特点：DOM-SAX-PULL" class="headerlink" title="解析XML的几种方式的原理和特点：DOM,SAX,PULL"></a>解析XML的几种方式的原理和特点：DOM,SAX,PULL</h3><p>DOM:消耗内存，先把xml文件读取到内存中，然后再用DOM API来访问树形结构，这个写起来很简单，但是消耗内存较大。<br>要是数据过大，手机不够牛逼，可以导致手机直接死机。</p>
<p>SAX:解析效率高，占内存少，基于事件驱动，更简单的说就是对文档进行顺序扫描，当扫面到的文档（doucument）开始和结束，元素<br>（element）开始和结束，文档（document）结束等地方通知事件处理函数，由事件处理函数做相应动作，然后继续同样的扫描，直到文档结束。</p>
<p>PULL：与SAX类似，也是基于事件驱动，我们可以调用他的next()方法，来获取下一个解析事件（就是开始文档，结束文档，开始标签，结束标签）<br>当处于某个元素时可以调用XmlPullParser的getAttributte()方法来获取属性的値，也可以调用他的nextText()获取本节点的値。</p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎访问我的博客，我会为你们奉献更多的干货，感谢大家的支持&lt;/p&gt;
&lt;h2 id=&quot;Please-read-happily&quot;&gt;&lt;a href=&quot;#Please-read-happily&quot; class=&quot;headerlink&quot; title=&quot;Please read happily&quot;&gt;&lt;/a&gt;Please read happily&lt;/h2&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://gyymz1993.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="https://gyymz1993.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>开发之Svn安装使用</title>
    <link href="https://gyymz1993.github.io/2016/12/21/2016-12-21-Svn/"/>
    <id>https://gyymz1993.github.io/2016/12/21/2016-12-21-Svn/</id>
    <published>2016-12-21T08:28:38.000Z</published>
    <updated>2016-12-21T09:07:17.838Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。</p>
<h2 id="Please-read-happily"><a href="#Please-read-happily" class="headerlink" title="Please read happily"></a>Please read happily</h2><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<p> <strong>为什么要使用SVN？</strong><br>      程序员在编写程序的过程中，每个程序员都会生成很多不同的版本，这就需要程序员有效的管理代码，在需要的时候可以迅速，准确取出相应的版本。<br><strong>Subversion是什么？</strong><br>   它是一个自由/开源的版本控制系统，一组文件存放在中心版本库，记录每一次文件和目录的修改，Subversion允许把数据恢复到早期版本，或是检查数据修改的历史，Subversion可以通过网络访问它的版本库，从而使用户在不同的电脑上进行操作。</p>
<h3 id="SVN服务器搭建和使用。"><a href="#SVN服务器搭建和使用。" class="headerlink" title="SVN服务器搭建和使用。"></a>SVN服务器搭建和使用。</h3><p>   <strong>1.     首先来下载和搭建SVN服务器,下载地址如下: <a href="http://subversion.apache.org/packages.html" target="_blank" rel="external">http://subversion.apache.org/packages.html</a>，进入网址后，滚动到浏览器最底部看到如下截图：</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/433829-b8d72dc66da8fa49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VisualSvn"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/433829-227710abe31fcc6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VisualSvn"></p>
<h3 id="点击【Finish】即可完成安装。安装完成后-启动VisualSVN-Server-Manager-如图"><a href="#点击【Finish】即可完成安装。安装完成后-启动VisualSVN-Server-Manager-如图" class="headerlink" title="点击【Finish】即可完成安装。安装完成后,启动VisualSVN Server Manager,如图:"></a>点击【Finish】即可完成安装。安装完成后,启动VisualSVN Server Manager,如图:</h3><p><img src="http://upload-images.jianshu.io/upload_images/433829-3af0e1e14833a637.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>可以在窗口的右边看到版本库的一些信息,比如状态,日志,用户认证,版本库等.</p>
<h3 id="要建立版本库-需要右键单击左边窗口的Repositores-如下图"><a href="#要建立版本库-需要右键单击左边窗口的Repositores-如下图" class="headerlink" title="要建立版本库,需要右键单击左边窗口的Repositores,如下图:"></a>要建立版本库,需要右键单击左边窗口的Repositores,如下图:</h3><p><img src="http://upload-images.jianshu.io/upload_images/433829-ec0cba0f5b59731f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="需要建立用户和组，并且需要分配权限。"><a href="#需要建立用户和组，并且需要分配权限。" class="headerlink" title="需要建立用户和组，并且需要分配权限。"></a><strong>需要建立用户和组，并且需要分配权限</strong>。</h3><ol>
<li>在VisualSVN Server Manager窗口的左侧右键单击用户组,选择Create User或者新建-&gt;User,如图:</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/433829-27f5c527daa2795d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/433829-51137c53333509d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Windows客户端SVN安装。"><a href="#Windows客户端SVN安装。" class="headerlink" title="Windows客户端SVN安装。"></a>Windows客户端SVN安装。</h2><h3 id="1-首先我们需要下载-”svn小乌龟”后，进行安装。-http-download-csdn-net-detail-gyymz1992-7664323"><a href="#1-首先我们需要下载-”svn小乌龟”后，进行安装。-http-download-csdn-net-detail-gyymz1992-7664323" class="headerlink" title="1.首先我们需要下载 ”svn小乌龟”后，进行安装。 http://download.csdn.net/detail/gyymz1992/7664323"></a><strong>1.首先我们需要下载 ”svn小乌龟”后，进行安装。 <a href="http://download.csdn.net/detail/gyymz1992/7664323" target="_blank" rel="external">http://download.csdn.net/detail/gyymz1992/7664323</a></strong></h3><h3 id="2：checkout项目文件。新建或者进入目录下-比如qianduan1-，右键-–-gt-Svn-Checkout-–-gt"><a href="#2：checkout项目文件。新建或者进入目录下-比如qianduan1-，右键-–-gt-Svn-Checkout-–-gt" class="headerlink" title="2：checkout项目文件。新建或者进入目录下(比如qianduan1)，右键 –&gt; Svn Checkout –&gt;"></a><strong>2：checkout项目文件。</strong>新建或者进入目录下(比如qianduan1)，右键 –&gt; Svn Checkout –&gt;</h3><p><img src="http://upload-images.jianshu.io/upload_images/433829-ca6ccfeb6383a91b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从服务器下载"></p>
<h2 id="AndroidStudio客户端Svn安装。"><a href="#AndroidStudio客户端Svn安装。" class="headerlink" title="AndroidStudio客户端Svn安装。"></a>AndroidStudio客户端Svn安装。</h2><p><strong>1.首先我们需要下载 ”TortoiseSVN”后，进行安装。 <a href="http://download.csdn.net/detail/gyymz1992/9717754" target="_blank" rel="external">http://download.csdn.net/detail/gyymz1992/9717754</a></strong></p>
<h3 id="1-安装成功后设置环境变量"><a href="#1-安装成功后设置环境变量" class="headerlink" title=" 1. 安装成功后设置环境变量 "></a><strong> 1. 安装成功后设置环境变量 </strong></h3><p><img src="http://upload-images.jianshu.io/upload_images/433829-664cd5d03befdee8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="2-设置AndroidStudio路径"><a href="#2-设置AndroidStudio路径" class="headerlink" title=" 2. 设置AndroidStudio路径 "></a><strong> 2. 设置AndroidStudio路径 </strong></h3><p><img src="http://upload-images.jianshu.io/upload_images/433829-71f9a5fe1d48c555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="引用文章地址"><a href="#引用文章地址" class="headerlink" title="引用文章地址"></a>引用文章地址</h2><p> <a href="http://www.cnblogs.com/armyfai/p/3985660.html" target="_blank" rel="external">http://www.cnblogs.com/armyfai/p/3985660.html</a>**</p>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。&lt;/p&gt;
&lt;h2 id=&quot;Please-read-happily&quot;&gt;&lt;a href=&quot;#Please-read-happily&quot; class=&quot;headerlink&quot; title=&quot;Please read happily&quot;&gt;&lt;/a&gt;Please read happily&lt;/h2&gt;
    
    </summary>
    
    
      <category term="svn" scheme="https://gyymz1993.github.io/tags/svn/"/>
    
      <category term="Subversion" scheme="https://gyymz1993.github.io/tags/Subversion/"/>
    
      <category term="TortoiseSVN" scheme="https://gyymz1993.github.io/tags/TortoiseSVN/"/>
    
      <category term="VisualSVN" scheme="https://gyymz1993.github.io/tags/VisualSVN/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你Git安装、配置和使用以及博客搭建</title>
    <link href="https://gyymz1993.github.io/2016/12/12/2016-12-12-Git_Make/"/>
    <id>https://gyymz1993.github.io/2016/12/12/2016-12-12-Git_Make/</id>
    <published>2016-12-12T07:28:38.000Z</published>
    <updated>2017-03-02T10:32:18.315Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。</p>
<h2 id="Please-read-happily"><a href="#Please-read-happily" class="headerlink" title="Please read happily"></a>Please read happily</h2><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">


<h3 id="需要用到的工具"><a href="#需要用到的工具" class="headerlink" title="需要用到的工具"></a>需要用到的工具</h3><p><img src="http://upload-images.jianshu.io/upload_images/433829-b5b729f1b3dbfe38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git.exe"></p>
<h3 id="安装Git只需要一直next就可以"><a href="#安装Git只需要一直next就可以" class="headerlink" title="安装Git只需要一直next就可以"></a>安装Git只需要一直next就可以</h3><p>1 首先去用邮箱注册<a href="https://github.com/" target="_blank" rel="external">GitHub</a>账号<br>2 测试git是否安装成功 启动程序GitBash<br>3 终端配置</p>
<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p><br></p>
<h3 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h3><p><code>$ git config --global user.name.你的用户名</code></p>
<h3 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h3><p><code>$ git config --global user.email 你的邮箱</code></p>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p><code>$ git config --global alias.ymz(这个随意) commit</code></p>
<h3 id="设置ssh-这个很重要哦"><a href="#设置ssh-这个很重要哦" class="headerlink" title="设置ssh 这个很重要哦"></a>设置ssh 这个很重要哦</h3><p><code>$ ssh-keygen -c &quot;你的邮箱&quot; -t rsa</code></p>
<h3 id="查看你的C盘Users-Administrator目录"><a href="#查看你的C盘Users-Administrator目录" class="headerlink" title="查看你的C盘Users/Administrator目录"></a>查看你的C盘Users/Administrator目录</h3><p>1 是否有.ssh文件夹<br>2 文件夹中有id_rsa、id_rsa.pub文件</p>
<h3 id="强制查看是否关联Github"><a href="#强制查看是否关联Github" class="headerlink" title="强制查看是否关联Github"></a>强制查看是否关联Github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">The authenticity of host &apos;github.com (192.30.253.113)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes)? yes</div><div class="line">Warning: Permanently added &apos;github.com,192.30.253.113&apos; (RSA) to the list of known hosts.</div><div class="line">Permission denied (publickey).</div></pre></td></tr></table></figure>
<p>why?为什么会这样呢？ 因为没有登录GitHub把我们刚刚生成的ssh给设置进去。</p>
<h3 id="说到这里了，肯定是设置SSH呢"><a href="#说到这里了，肯定是设置SSH呢" class="headerlink" title="说到这里了，肯定是设置SSH呢"></a>说到这里了，肯定是设置SSH呢</h3><p>1 首先进入Git-Setting设置<a href="https://github.com/settings/keys" target="_blank" rel="external">SSH and GPG key</a><br>2 将id_rsa.pub文件用记事本打开将里面所有的内容复制添加到github中的key</p>
<h3 id="再次查看是否关联Github"><a href="#再次查看是否关联Github" class="headerlink" title="再次查看是否关联Github"></a>再次查看是否关联Github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line">Warning: Permanently added the RSA host key for IP address &apos;192.30.253.112&apos; to the list of known hosts.</div><div class="line">Permission denied (publickey).</div></pre></td></tr></table></figure>
<h3 id="妈蛋居然提示失败，我发现我复制的时候没有复制完全，纯属意外"><a href="#妈蛋居然提示失败，我发现我复制的时候没有复制完全，纯属意外" class="headerlink" title="妈蛋居然提示失败，我发现我复制的时候没有复制完全，纯属意外"></a>妈蛋居然提示失败，我发现我复制的时候没有复制完全，纯属意外</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$  ssh -T git@github.com</div><div class="line">Hi gyymz1993! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>这个提示就表示成功了</p>
<h3 id="这个命令可以查看出错信息"><a href="#这个命令可以查看出错信息" class="headerlink" title="这个命令可以查看出错信息"></a>这个命令可以查看出错信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  shh -T -v git@github.com</div></pre></td></tr></table></figure>
<p><br></p>
<h1 id="现在就是最实用最牛逼得部分了"><a href="#现在就是最实用最牛逼得部分了" class="headerlink" title="现在就是最实用最牛逼得部分了"></a>现在就是最实用最牛逼得部分了</h1><p><br></p>
<h3 id="提交本地项目步骤"><a href="#提交本地项目步骤" class="headerlink" title="提交本地项目步骤"></a>提交本地项目步骤</h3><p>1 在gitHub新建个项目（这个不会自行百度）<br>2 命令提交</p>
<h3 id="增加注释文件"><a href="#增加注释文件" class="headerlink" title="增加注释文件"></a>增加注释文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  echo &quot;# MstarStoreApp&quot; &gt;&gt; README.md</div></pre></td></tr></table></figure>
<p>第一步想当然注释告诉别人这个项目是干嘛的</p>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git init</div></pre></td></tr></table></figure>
<h3 id="添加所有文件"><a href="#添加所有文件" class="headerlink" title="添加所有文件"></a>添加所有文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git add .</div></pre></td></tr></table></figure>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git commit -m &quot;first commit&quot;</div></pre></td></tr></table></figure>
<h3 id="你的gitHub项目的SSH路径"><a href="#你的gitHub项目的SSH路径" class="headerlink" title="你的gitHub项目的SSH路径"></a>你的gitHub项目的SSH路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git remote add origin git@github.com:yourname/XXX.git</div></pre></td></tr></table></figure>
<h3 id="最后一步就是提交了"><a href="#最后一步就是提交了" class="headerlink" title="最后一步就是提交了"></a>最后一步就是提交了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="今天提交遇见这种错误"><a href="#今天提交遇见这种错误" class="headerlink" title="今天提交遇见这种错误"></a>今天提交遇见这种错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div><div class="line">Counting objects: 159, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (150/150), done.</div><div class="line">Writing objects: 100% (159/159), 521.63 KiB | 0 bytes/s, done.</div><div class="line">Total 159 (delta 3), reused 0 (delta 0)</div><div class="line">packet_write_wait: Connection to 192.30.253.112 port 22: Broken pipe</div><div class="line">fatal: The remote end hung up unexpectedly</div><div class="line">fatal: The remote end hung up unexpectedly</div></pre></td></tr></table></figure>
<h3 id="可能是文件过大造成的解决办法"><a href="#可能是文件过大造成的解决办法" class="headerlink" title="可能是文件过大造成的解决办法"></a>可能是文件过大造成的解决办法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git config http.postBuffer 524288000</div><div class="line">Administrator@2011-20151010QW MINGW64 /d/Git/Hexo1 (master)</div><div class="line">$ git push -u origin master</div><div class="line">Counting objects: 159, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (150/150), done.</div><div class="line">Writing objects: 100% (159/159), 521.63 KiB | 0 bytes/s, done.</div><div class="line">Total 159 (delta 3), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (3/3), done.</div><div class="line">To github.com:gyymz1993/GitHubHexo.git</div><div class="line"> * [new branch]      master -&gt; master</div><div class="line">Branch master set up to track remote branch master from origin.</div></pre></td></tr></table></figure>
<h3 id="当你修改你的项目提交"><a href="#当你修改你的项目提交" class="headerlink" title="当你修改你的项目提交"></a>当你修改你的项目提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$  git add . </div><div class="line">$  git commit -m &apos;update&apos;</div><div class="line">$  git push</div></pre></td></tr></table></figure>
<h3 id="当你本地删除文件后需要拉取GitHub文件执行，意思是还原和服务器同步"><a href="#当你本地删除文件后需要拉取GitHub文件执行，意思是还原和服务器同步" class="headerlink" title="当你本地删除文件后需要拉取GitHub文件执行，意思是还原和服务器同步"></a>当你本地删除文件后需要拉取GitHub文件执行，意思是还原和服务器同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git checkout .</div></pre></td></tr></table></figure>
<h3 id="当你在gitHub服务修改文件后必须pull才能修改到本地"><a href="#当你在gitHub服务修改文件后必须pull才能修改到本地" class="headerlink" title="当你在gitHub服务修改文件后必须pull才能修改到本地"></a>当你在gitHub服务修改文件后必须pull才能修改到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git pull</div></pre></td></tr></table></figure>
<h3 id="下载一个项目到本地"><a href="#下载一个项目到本地" class="headerlink" title="下载一个项目到本地"></a>下载一个项目到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  git clone git@github.com:yourname/XXX.git</div></pre></td></tr></table></figure>
<p><br></p>
<h1 id="更牛逼的部分，搭建自己的博客"><a href="#更牛逼的部分，搭建自己的博客" class="headerlink" title="更牛逼的部分，搭建自己的博客"></a>更牛逼的部分，搭建自己的博客</h1><p><br></p>
<h3 id="需要用到的工具node-js-msi-下载"><a href="#需要用到的工具node-js-msi-下载" class="headerlink" title="需要用到的工具node.js.msi 下载"></a>需要用到的工具<a href="http://nodejs.cn/download/" target="_blank" rel="external">node.js.msi</a> 下载</h3><h5 id="安装只需要一直next就可以"><a href="#安装只需要一直next就可以" class="headerlink" title="安装只需要一直next就可以"></a>安装只需要一直next就可以</h5><h3 id="next完后测试是否安装成功"><a href="#next完后测试是否安装成功" class="headerlink" title="next完后测试是否安装成功"></a>next完后测试是否安装成功</h3><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$  找到安装目录    C:\node</div><div class="line">   配置环境变量  path  加上  C:\node</div></pre></td></tr></table></figure>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm --v</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  node -v</div></pre></td></tr></table></figure>
<h4 id="如果出现版本号则正确安装"><a href="#如果出现版本号则正确安装" class="headerlink" title="如果出现版本号则正确安装"></a>如果出现版本号则正确安装</h4><h3 id="本地博客环境创建-安装hexo"><a href="#本地博客环境创建-安装hexo" class="headerlink" title="本地博客环境创建 安装hexo"></a>本地博客环境创建 安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm install -g hexo</div></pre></td></tr></table></figure>
<h3 id="保存安装"><a href="#保存安装" class="headerlink" title="保存安装"></a>保存安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  npm install hexo --save</div></pre></td></tr></table></figure>
<h3 id="查看-hexo是否安装成功"><a href="#查看-hexo是否安装成功" class="headerlink" title="查看 hexo是否安装成功"></a>查看 hexo是否安装成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  hexo -v</div></pre></td></tr></table></figure>
<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  hexo init</div></pre></td></tr></table></figure>
<h3 id="开始本地服务"><a href="#开始本地服务" class="headerlink" title="开始本地服务"></a>开始本地服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  hexo s</div></pre></td></tr></table></figure>
<p>再浏览器中输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>    即可浏览</p>
<h3 id="找到hexo目录下的D-Git-Hexo-config-yml文件修改项目中的ssh路径"><a href="#找到hexo目录下的D-Git-Hexo-config-yml文件修改项目中的ssh路径" class="headerlink" title="找到hexo目录下的D:\Git\Hexo_config.yml文件修改项目中的ssh路径"></a>找到hexo目录下的D:\Git\Hexo_config.yml文件修改项目中的ssh路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yourname/yourname.github-io.git</div></pre></td></tr></table></figure>
<h3 id="修改成这样执行"><a href="#修改成这样执行" class="headerlink" title="修改成这样执行"></a>修改成这样执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h3 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure>
<h3 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<h1 id="折腾（换电脑后使用）-目前自己笨方法"><a href="#折腾（换电脑后使用）-目前自己笨方法" class="headerlink" title="折腾（换电脑后使用） 目前自己笨方法"></a>折腾（换电脑后使用） 目前自己笨方法</h1><p><br></p>
<h3 id="前面得操作一样，紧跟着初-始化hexo后用原来的博文文件替换现在的文件"><a href="#前面得操作一样，紧跟着初-始化hexo后用原来的博文文件替换现在的文件" class="headerlink" title="前面得操作一样，紧跟着初 ##始化hexo后用原来的博文文件替换现在的文件"></a>前面得操作一样，紧跟着初 ##始化hexo后用原来的博文文件替换现在的文件</h3><p>1 Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）<br>2 _config.yml 你自己的配置文件<br>3 \Hexo\source 目录下你的所有博客文件<br>4 themes\yelee 这个是你的主题文件<br>当你替换好之后开始接着到</p>
<p>开始本地服务&gt;后的操作</p>
<h3 id="直到最后一步部署到服务器"><a href="#直到最后一步部署到服务器" class="headerlink" title="直到最后一步部署到服务器"></a>直到最后一步部署到服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure>
<p>这是咋回事呢？</p>
<h3 id="重新安装deployer"><a href="#重新安装deployer" class="headerlink" title="重新安装deployer"></a>重新安装deployer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git</div></pre></td></tr></table></figure>
<h3 id="保存安装deployer"><a href="#保存安装deployer" class="headerlink" title="保存安装deployer"></a>保存安装deployer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h1 id="Hexo-node-modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装"><a href="#Hexo-node-modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装" class="headerlink" title="Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装"></a>Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装</h1><h1 id="Hexo-node-modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装-1"><a href="#Hexo-node-modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装-1" class="headerlink" title="Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装"></a>Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装</h1><h1 id="Hexo-node-modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装-2"><a href="#Hexo-node-modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装-2" class="headerlink" title="Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装"></a>Hexo\node_modules（这个其实就是你安装的插件什么搜索系统啊之类的）这部分其实替换没有用，必须重新安装</h1></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。&lt;/p&gt;
&lt;h2 id=&quot;Please-read-happily&quot;&gt;&lt;a href=&quot;#Please-read-happily&quot; class=&quot;headerlink&quot; title=&quot;Please read happily&quot;&gt;&lt;/a&gt;Please read happily&lt;/h2&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://gyymz1993.github.io/tags/git/"/>
    
      <category term="gitHub" scheme="https://gyymz1993.github.io/tags/gitHub/"/>
    
      <category term="hexo" scheme="https://gyymz1993.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你MarkDown写作</title>
    <link href="https://gyymz1993.github.io/2016/12/09/2016-12-09-MarkDow/"/>
    <id>https://gyymz1993.github.io/2016/12/09/2016-12-09-MarkDow/</id>
    <published>2016-12-09T03:29:30.000Z</published>
    <updated>2016-12-09T06:44:24.118Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。</p>
<h2 id="Please-read-happily"><a href="#Please-read-happily" class="headerlink" title="Please read happily"></a>Please read happily</h2><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">


<h3 id="Markdown-支持以下这些符号前面加上反斜杠来帮助插入普通的符号："><a href="#Markdown-支持以下这些符号前面加上反斜杠来帮助插入普通的符号：" class="headerlink" title="Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号："></a>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</h3><p>  \     *     #   {}   `  _<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 语法: \*   \<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<h3 id="字符也要转换。比如你要链接到："><a href="#字符也要转换。比如你要链接到：" class="headerlink" title="字符也要转换。比如你要链接到："></a>字符也要转换。比如你要链接到：</h3><p>1 在 HTML 文件中，有两个字符需要特殊处理： <strong><em>   &lt; 和 &amp;    </em></strong><br>如果你只是想要显示这些字符的原型，你必须要使用实体的形式。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 像是 &amp;lt;和 &amp;amp;</div></pre></td></tr></table></figure></p>
<p>2 <a href="http://images.google.com/images?num=30&amp;q=larry+bird" target="_blank" rel="external">http://images.google.com/images?num=30&amp;q=larry+bird</a><br>你必须要把网址转换写为：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  http://images.google.com/images?num=30&amp;amp;q=larry+bird</div></pre></td></tr></table></figure></p>
<h3 id="文字加粗"><a href="#文字加粗" class="headerlink" title="文字加粗"></a>文字加粗</h3><ul>
<li><strong>该文字是粗体</strong> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  加粗字体使用两个*或者一个_包起来</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="单行代码块"><a href="#单行代码块" class="headerlink" title="单行代码块"></a>单行代码块</h3><p><code>Hellow  word</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  单行代码块使用符号 `包起来</div></pre></td></tr></table></figure></p>
<h3 id="多行代码块使用符号"><a href="#多行代码块使用符号" class="headerlink" title="多行代码块使用符号"></a>多行代码块使用符号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hellow  word</div><div class="line">Hellow  word</div><div class="line">Hellow  word</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   多行代码块使用符号  ``` 包起来</div></pre></td></tr></table></figure>
<h3 id="这是引用的文字"><a href="#这是引用的文字" class="headerlink" title="这是引用的文字"></a>这是引用的文字</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  引用的文字前面加&gt;</div></pre></td></tr></table></figure>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$  语法：[你要显示的文字](链接的地址)</div><div class="line">     例如：[简书](http://www.jianshu.com)</div></pre></td></tr></table></figure>
<h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$  语法：[站外图片上传中……(1)]</div><div class="line">     例如：[站外图片上传中……(2)]</div><div class="line">     注：当想插入本地图片时，直接将图片拖入你要放的位置*</div></pre></td></tr></table></figure>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$  语法：直接输入数字加空格</div><div class="line">     例如：1 是有序1</div></pre></td></tr></table></figure>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$  语法：直接-加空格或者*</div></pre></td></tr></table></figure>
<h3 id="使用标题栏"><a href="#使用标题栏" class="headerlink" title="使用标题栏"></a>使用标题栏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$  语法：<span class="comment"># 这是 H1  ea210b</span></div><div class="line">        <span class="comment">## 这是 H2</span></div><div class="line">        <span class="comment">###### 这是 H6</span></div></pre></td></tr></table></figure>
<h3 id="Github为文章增加多个categories和tags"><a href="#Github为文章增加多个categories和tags" class="headerlink" title="Github为文章增加多个categories和tags"></a>Github为文章增加多个categories和tags</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$  语法：categories:</div><div class="line">         - hexo</div><div class="line">         - mardDown</div><div class="line">         tags:</div><div class="line">         - Github</div><div class="line">         - tags</div></pre></td></tr></table></figure>
<h3 id="Github为文章增加多个html"><a href="#Github为文章增加多个html" class="headerlink" title="Github为文章增加多个html"></a>Github为文章增加多个html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"duoshuo-count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$  语法：</div><div class="line">	```html</div><div class="line">	&lt;!-- 这是代码中注释  --&gt;</div><div class="line">	&lt;span class=<span class="string">"duoshuo-count  2da7cc"</span>&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### Github为文章增加多个json</div><div class="line">```json</div><div class="line">&#123;</div><div class="line">    &quot;data&quot;: &#123;</div><div class="line">        &quot;message&quot;: &quot;json&quot;,</div><div class="line">    &#125;,</div><div class="line">    &quot;erroe&quot;: &quot;0&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$  语法：</div><div class="line">	```json</div><div class="line">&#123;</div><div class="line">    <span class="string">"data"</span>: &#123;</div><div class="line">        <span class="string">"message"</span>: <span class="string">"json"</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"erroe"</span>: <span class="string">"0"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。&lt;/p&gt;
&lt;h2 id=&quot;Please-read-happily&quot;&gt;&lt;a href=&quot;#Please-read-happily&quot; class=&quot;headerlink&quot; title=&quot;Please read happily&quot;&gt;&lt;/a&gt;Please read happily&lt;/h2&gt;
    
    </summary>
    
    
      <category term="mardown" scheme="https://gyymz1993.github.io/tags/mardown/"/>
    
  </entry>
  
  <entry>
    <title>我的GitHub之旅</title>
    <link href="https://gyymz1993.github.io/2016/12/07/2016-12-07-GitHub/"/>
    <id>https://gyymz1993.github.io/2016/12/07/2016-12-07-GitHub/</id>
    <published>2016-12-07T07:28:38.000Z</published>
    <updated>2017-03-27T03:43:00.800Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。</p>
<h2 id="Please-read-happily"><a href="#Please-read-happily" class="headerlink" title="Please read happily"></a>Please read happily</h2><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="参照文档-Hexo-Yelee"><a href="#参照文档-Hexo-Yelee" class="headerlink" title="参照文档 Hexo_Yelee"></a>参照文档 <a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Hexo_Yelee</a></h3><h3 id="学习Hexo写作教程-Hexo"><a href="#学习Hexo写作教程-Hexo" class="headerlink" title="学习Hexo写作教程 Hexo"></a>学习Hexo写作教程 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">Hexo</a></h3><h3 id="GitHub博客中-config-yml配置"><a href="#GitHub博客中-config-yml配置" class="headerlink" title="GitHub博客中_config_yml配置"></a>GitHub博客中<a href="http://blog.csdn.net/willxue123/article/details/50994852" target="_blank" rel="external">_config_yml配置</a></h3><div class="player"><br><bgsound src=" http://sc.111ttt.com/up/mp3/270082/ECC6F3E7533F610DBB0AFCEF30E2EB83.mp3" loop="-1"><br></bgsound></div>
</the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎我的小博，我正在努力学习，我会在不久将来给你们分享更多的干货，希望你们喜欢。&lt;/p&gt;
&lt;h2 id=&quot;Please-read-happily&quot;&gt;&lt;a href=&quot;#Please-read-happily&quot; class=&quot;headerlink&quot; title=&quot;Please read happily&quot;&gt;&lt;/a&gt;Please read happily&lt;/h2&gt;
    
    </summary>
    
    
      <category term="github hexo" scheme="https://gyymz1993.github.io/tags/github-hexo/"/>
    
  </entry>
  
</feed>
